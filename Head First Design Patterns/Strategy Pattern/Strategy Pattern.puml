@startuml
package Client <<Rectangle>>{
    abstract class Duck {
        + FlyBehavior flyBehavior
        + QuackBehavior quackBehavior
        + swim()
        + display()
        + performFly()
        + performQuack()
        + setFlyBehavior()
        + setQuackBehavior()
    }
    class ModelDuck {
        + ModelDuck()
    }
    class RedheadDuck {
        + RedheadDuck()
    }
    class MallardDuck {
        + MallardDuck()
    }
}

package "Encapsulated FlyBehavior" <<Rectangle>>{
    interface FlyBehavior {
        + fly()
    }

    class FlyWithWings {
        + fly()
    }
    class FlyNoWay {
        + fly()
    }
    class FlyRocketPowered {
        + fly()
    }
}

package "Encapsulated QuackBehavior" <<Rectangle>>{
    interface QuackBehavior {
        + quack()
    }
    class Quack {
        + quack()
    }
    class MuteQuack {
        + quack()
    }
    class Squeak {
        + quack()
    }
}

Duck  <|-- MallardDuck
Duck  <|-- RedheadDuck
Duck  <|-- ModelDuck

FlyBehavior <|.. FlyWithWings
FlyBehavior <|.. FlyNoWay
FlyBehavior <|.. FlyRocketPowered

QuackBehavior <|.. Quack
QuackBehavior <|.. MuteQuack
QuackBehavior <|.. Squeak

QuackBehavior  <|-- Duck
FlyBehavior  <|-- Duck

@enduml